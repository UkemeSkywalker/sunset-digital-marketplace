{
  "service": {
    "service": "sunset-digital-marketplace",
    "serviceObject": {
      "name": "sunset-digital-marketplace"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs18.x",
      "region": "us-east-1",
      "environment": {
        "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
        "USERS_TABLE": "sunset-digital-marketplace-users-dev",
        "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
        "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
      },
      "iamRoleStatements": [
        {
          "Effect": "Allow",
          "Action": [
            "dynamodb:Query",
            "dynamodb:Scan",
            "dynamodb:GetItem",
            "dynamodb:PutItem",
            "dynamodb:UpdateItem",
            "dynamodb:DeleteItem"
          ],
          "Resource": [
            {
              "Fn::GetAtt": [
                "ProductsTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "UsersTable",
                "Arn"
              ]
            },
            {
              "Fn::GetAtt": [
                "OrdersTable",
                "Arn"
              ]
            }
          ]
        },
        {
          "Effect": "Allow",
          "Action": [
            "s3:PutObject",
            "s3:GetObject",
            "s3:DeleteObject"
          ],
          "Resource": {
            "Fn::Join": [
              "",
              [
                {
                  "Fn::GetAtt": [
                    "ProductBucket",
                    "Arn"
                  ]
                },
                "/*"
              ]
            ]
          }
        }
      ],
      "stage": "dev",
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-createUser"
            }
          },
          "ListProductsLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-listProducts"
            }
          },
          "GetProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-getProduct"
            }
          },
          "CreateProductLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-createProduct"
            }
          },
          "CreateOrderLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-createOrder"
            }
          },
          "GetOrdersLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/sunset-digital-marketplace-dev-getOrders"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "sunset-digital-marketplace",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup",
                          "logs:TagResource"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sunset-digital-marketplace-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/sunset-digital-marketplace-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iamRoleStatements\"][1]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "sunset-digital-marketplace",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/auth/createUser.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "ListProductsLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/products/listProducts.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-listProducts",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "ListProductsLogGroup"
            ]
          },
          "GetProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/products/getProduct.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-getProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetProductLogGroup"
            ]
          },
          "CreateProductLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/products/createProduct.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-createProduct",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateProductLogGroup"
            ]
          },
          "CreateOrderLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/orders/createOrder.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-createOrder",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateOrderLogGroup"
            ]
          },
          "GetOrdersLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
                "S3Key": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z/sunset-digital-marketplace.zip"
              },
              "Handler": "src/orders/getOrders.handler",
              "Runtime": "nodejs18.x",
              "FunctionName": "sunset-digital-marketplace-dev-getOrders",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "PRODUCTS_TABLE": "sunset-digital-marketplace-products-dev",
                  "USERS_TABLE": "sunset-digital-marketplace-users-dev",
                  "ORDERS_TABLE": "sunset-digital-marketplace-orders-dev",
                  "PRODUCT_BUCKET": "sunset-digital-marketplace-products-dev"
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetOrdersLogGroup"
            ]
          },
          "CreateUserLambdaVersionv6wcLB3asD0PwqpmxFHmU2jjWEnR0kzyFR7e818H5U": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "ListProductsLambdaVersiondY3o09XyFLWLaHlD7eMU0CSOI1nE7tWtBOAVlsmiyo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "ListProductsLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "GetProductLambdaVersionVWMphvu8KXvMnBmNEPHhEUS1jmObY2ADQ3zo9Lzw": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetProductLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "CreateProductLambdaVersion7QBFTGUPdRFjIBzyyDVcJymkntib0b3caLYYY4icAKA": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateProductLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "CreateOrderLambdaVersionCH7WrrbFuzNGioT8fhwmnedjRYUAxWNCrcJsF2pomI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateOrderLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "GetOrdersLambdaVersionBg1s0X40x0bKRkN54OR88PJ7uS6sf9fU7e2dvLRWW8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetOrdersLambdaFunction"
              },
              "CodeSha256": "pvZRsMAMwK7LjPuGCq9s8uyymJfP4kmWyMdayHBMllU="
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-sunset-digital-marketplace",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceUsers": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "users",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProducts": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "products",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceProductsIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "PathPart": "{id}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceOrders": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "orders",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,POST,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodProductsIdVarOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodOrdersOptions": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "AuthorizationType": "NONE",
              "HttpMethod": "OPTIONS",
              "MethodResponses": [
                {
                  "StatusCode": "200",
                  "ResponseParameters": {
                    "method.response.header.Access-Control-Allow-Origin": true,
                    "method.response.header.Access-Control-Allow-Headers": true,
                    "method.response.header.Access-Control-Allow-Methods": true
                  },
                  "ResponseModels": {}
                }
              ],
              "RequestParameters": {},
              "Integration": {
                "Type": "MOCK",
                "RequestTemplates": {
                  "application/json": "{statusCode:200}"
                },
                "ContentHandling": "CONVERT_TO_TEXT",
                "IntegrationResponses": [
                  {
                    "StatusCode": "200",
                    "ResponseParameters": {
                      "method.response.header.Access-Control-Allow-Origin": "'*'",
                      "method.response.header.Access-Control-Allow-Headers": "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token,X-Amz-User-Agent,X-Amzn-Trace-Id'",
                      "method.response.header.Access-Control-Allow-Methods": "'OPTIONS,GET,POST'"
                    },
                    "ResponseTemplates": {
                      "application/json": ""
                    }
                  }
                ]
              },
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodUsersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUsers"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "ListProductsLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "ListProductsLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProductsIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodProductsPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceProducts"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateProductLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateProductLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrdersPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateOrderLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateOrderLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodOrdersGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceOrders"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "AWS_IAM",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetOrdersLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetOrdersLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1749695122704": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodUsersOptions",
              "ApiGatewayMethodProductsOptions",
              "ApiGatewayMethodProductsIdVarOptions",
              "ApiGatewayMethodOrdersOptions",
              "ApiGatewayMethodUsersPost",
              "ApiGatewayMethodProductsGet",
              "ApiGatewayMethodProductsIdVarGet",
              "ApiGatewayMethodProductsPost",
              "ApiGatewayMethodOrdersPost",
              "ApiGatewayMethodOrdersGet"
            ]
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ListProductsLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "ListProductsLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateProductLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateProductLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateOrderLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateOrderLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetOrdersLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetOrdersLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "ProductsTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "sunset-digital-marketplace-products-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "UsersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "sunset-digital-marketplace-users-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ]
            }
          },
          "OrdersTable": {
            "Type": "AWS::DynamoDB::Table",
            "Properties": {
              "TableName": "sunset-digital-marketplace-orders-dev",
              "BillingMode": "PAY_PER_REQUEST",
              "AttributeDefinitions": [
                {
                  "AttributeName": "id",
                  "AttributeType": "S"
                },
                {
                  "AttributeName": "userId",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "id",
                  "KeyType": "HASH"
                }
              ],
              "GlobalSecondaryIndexes": [
                {
                  "IndexName": "userIdIndex",
                  "KeySchema": [
                    {
                      "AttributeName": "userId",
                      "KeyType": "HASH"
                    }
                  ],
                  "Projection": {
                    "ProjectionType": "ALL"
                  }
                }
              ]
            }
          },
          "ProductBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketName": "sunset-digital-marketplace-products-dev",
              "CorsConfiguration": {
                "CorsRules": [
                  {
                    "AllowedHeaders": [
                      "*"
                    ],
                    "AllowedMethods": [
                      "GET",
                      "PUT",
                      "POST",
                      "DELETE"
                    ],
                    "AllowedOrigins": [
                      "*"
                    ]
                  }
                ]
              }
            }
          },
          "UserPool": {
            "Type": "AWS::Cognito::UserPool",
            "Properties": {
              "UserPoolName": "sunset-digital-marketplace-user-pool-dev",
              "AutoVerifiedAttributes": [
                "email"
              ],
              "UsernameAttributes": [
                "email"
              ]
            }
          },
          "UserPoolClient": {
            "Type": "AWS::Cognito::UserPoolClient",
            "Properties": {
              "ClientName": "sunset-digital-marketplace-user-pool-client-dev",
              "UserPoolId": {
                "Ref": "UserPool"
              },
              "ExplicitAuthFlows": [
                "ALLOW_USER_SRP_AUTH",
                "ALLOW_REFRESH_TOKEN_AUTH"
              ],
              "GenerateSecret": false
            }
          },
          "BuyersGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "buyers",
              "UserPoolId": {
                "Ref": "UserPool"
              }
            }
          },
          "SellersGroup": {
            "Type": "AWS::Cognito::UserPoolGroup",
            "Properties": {
              "GroupName": "sellers",
              "UserPoolId": {
                "Ref": "UserPool"
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": "serverless-framework-deployments-us-east-1-58781ef0-93f5",
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-ServerlessDeploymentBucketName"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersionv6wcLB3asD0PwqpmxFHmU2jjWEnR0kzyFR7e818H5U"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "ListProductsLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "ListProductsLambdaVersiondY3o09XyFLWLaHlD7eMU0CSOI1nE7tWtBOAVlsmiyo"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-ListProductsLambdaFunctionQualifiedArn"
            }
          },
          "GetProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetProductLambdaVersionVWMphvu8KXvMnBmNEPHhEUS1jmObY2ADQ3zo9Lzw"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-GetProductLambdaFunctionQualifiedArn"
            }
          },
          "CreateProductLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateProductLambdaVersion7QBFTGUPdRFjIBzyyDVcJymkntib0b3caLYYY4icAKA"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-CreateProductLambdaFunctionQualifiedArn"
            }
          },
          "CreateOrderLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateOrderLambdaVersionCH7WrrbFuzNGioT8fhwmnedjRYUAxWNCrcJsF2pomI"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-CreateOrderLambdaFunctionQualifiedArn"
            }
          },
          "GetOrdersLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetOrdersLambdaVersionBg1s0X40x0bKRkN54OR88PJ7uS6sf9fU7e2dvLRWW8"
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-GetOrdersLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-sunset-digital-marketplace-dev-ServiceEndpoint"
            }
          },
          "ProductsTableName": {
            "Value": {
              "Ref": "ProductsTable"
            }
          },
          "UsersTableName": {
            "Value": {
              "Ref": "UsersTable"
            }
          },
          "OrdersTableName": {
            "Value": {
              "Ref": "OrdersTable"
            }
          },
          "ProductBucketName": {
            "Value": {
              "Ref": "ProductBucket"
            }
          },
          "UserPoolId": {
            "Value": {
              "Ref": "UserPool"
            }
          },
          "UserPoolClientId": {
            "Value": {
              "Ref": "UserPoolClient"
            }
          }
        }
      },
      "vpc": {}
    },
    "plugins": [
      "serverless-offline"
    ],
    "pluginsData": {},
    "functions": {
      "createUser": {
        "handler": "src/auth/createUser.handler",
        "events": [
          {
            "http": {
              "path": "users",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersionv6wcLB3asD0PwqpmxFHmU2jjWEnR0kzyFR7e818H5U"
      },
      "listProducts": {
        "handler": "src/products/listProducts.handler",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-listProducts",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "ListProductsLambdaVersiondY3o09XyFLWLaHlD7eMU0CSOI1nE7tWtBOAVlsmiyo"
      },
      "getProduct": {
        "handler": "src/products/getProduct.handler",
        "events": [
          {
            "http": {
              "path": "products/{id}",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-getProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetProductLambdaVersionVWMphvu8KXvMnBmNEPHhEUS1jmObY2ADQ3zo9Lzw"
      },
      "createProduct": {
        "handler": "src/products/createProduct.handler",
        "events": [
          {
            "http": {
              "path": "products",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-createProduct",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateProductLambdaVersion7QBFTGUPdRFjIBzyyDVcJymkntib0b3caLYYY4icAKA"
      },
      "createOrder": {
        "handler": "src/orders/createOrder.handler",
        "events": [
          {
            "http": {
              "path": "orders",
              "method": "post",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "POST"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-createOrder",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "CreateOrderLambdaVersionCH7WrrbFuzNGioT8fhwmnedjRYUAxWNCrcJsF2pomI"
      },
      "getOrders": {
        "handler": "src/orders/getOrders.handler",
        "events": [
          {
            "http": {
              "path": "orders",
              "method": "get",
              "cors": {
                "origin": "*",
                "methods": [
                  "OPTIONS",
                  "GET"
                ],
                "headers": [
                  "Content-Type",
                  "X-Amz-Date",
                  "Authorization",
                  "X-Api-Key",
                  "X-Amz-Security-Token",
                  "X-Amz-User-Agent",
                  "X-Amzn-Trace-Id"
                ],
                "allowCredentials": false
              },
              "authorizer": {
                "type": "AWS_IAM",
                "managedExternally": false,
                "identitySource": "method.request.header.Authorization"
              },
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "sunset-digital-marketplace-dev-getOrders",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs18.x",
        "vpc": {},
        "versionLogicalId": "GetOrdersLambdaVersionBg1s0X40x0bKRkN54OR88PJ7uS6sf9fU7e2dvLRWW8"
      }
    },
    "resources": {
      "Resources": {
        "ProductsTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "sunset-digital-marketplace-products-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "UsersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "sunset-digital-marketplace-users-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ]
          }
        },
        "OrdersTable": {
          "Type": "AWS::DynamoDB::Table",
          "Properties": {
            "TableName": "sunset-digital-marketplace-orders-dev",
            "BillingMode": "PAY_PER_REQUEST",
            "AttributeDefinitions": [
              {
                "AttributeName": "id",
                "AttributeType": "S"
              },
              {
                "AttributeName": "userId",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "id",
                "KeyType": "HASH"
              }
            ],
            "GlobalSecondaryIndexes": [
              {
                "IndexName": "userIdIndex",
                "KeySchema": [
                  {
                    "AttributeName": "userId",
                    "KeyType": "HASH"
                  }
                ],
                "Projection": {
                  "ProjectionType": "ALL"
                }
              }
            ]
          }
        },
        "ProductBucket": {
          "Type": "AWS::S3::Bucket",
          "Properties": {
            "BucketName": "sunset-digital-marketplace-products-dev",
            "CorsConfiguration": {
              "CorsRules": [
                {
                  "AllowedHeaders": [
                    "*"
                  ],
                  "AllowedMethods": [
                    "GET",
                    "PUT",
                    "POST",
                    "DELETE"
                  ],
                  "AllowedOrigins": [
                    "*"
                  ]
                }
              ]
            }
          }
        },
        "UserPool": {
          "Type": "AWS::Cognito::UserPool",
          "Properties": {
            "UserPoolName": "sunset-digital-marketplace-user-pool-dev",
            "AutoVerifiedAttributes": [
              "email"
            ],
            "UsernameAttributes": [
              "email"
            ]
          }
        },
        "UserPoolClient": {
          "Type": "AWS::Cognito::UserPoolClient",
          "Properties": {
            "ClientName": "sunset-digital-marketplace-user-pool-client-dev",
            "UserPoolId": {
              "Ref": "UserPool"
            },
            "ExplicitAuthFlows": [
              "ALLOW_USER_SRP_AUTH",
              "ALLOW_REFRESH_TOKEN_AUTH"
            ],
            "GenerateSecret": false
          }
        },
        "BuyersGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "buyers",
            "UserPoolId": {
              "Ref": "UserPool"
            }
          }
        },
        "SellersGroup": {
          "Type": "AWS::Cognito::UserPoolGroup",
          "Properties": {
            "GroupName": "sellers",
            "UserPoolId": {
              "Ref": "UserPool"
            }
          }
        }
      },
      "Outputs": {
        "ProductsTableName": {
          "Value": {
            "Ref": "ProductsTable"
          }
        },
        "UsersTableName": {
          "Value": {
            "Ref": "UsersTable"
          }
        },
        "OrdersTableName": {
          "Value": {
            "Ref": "OrdersTable"
          }
        },
        "ProductBucketName": {
          "Value": {
            "Ref": "ProductBucket"
          }
        },
        "UserPoolId": {
          "Value": {
            "Ref": "UserPool"
          }
        },
        "UserPoolClientId": {
          "Value": {
            "Ref": "UserPoolClient"
          }
        }
      }
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless",
    "initialServerlessConfig": {
      "service": "sunset-digital-marketplace",
      "frameworkVersion": "4",
      "plugins": {
        "$ref": "$[\"service\"][\"plugins\"]"
      },
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "appId": null,
    "orgId": null,
    "layers": {},
    "artifact": "/Users/ukeme/sunset-digital-marketplace/backend/.serverless/sunset-digital-marketplace.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/sunset-digital-marketplace/dev/1749695145396-2025-06-12T02:25:45.396Z",
    "artifact": "sunset-digital-marketplace.zip"
  }
}