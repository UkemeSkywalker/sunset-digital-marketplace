service: sunset-digital-marketplace

frameworkVersion: '4'

plugins:
  - serverless-offline
  
custom:
  timestamp: ${env:TIMESTAMP, ''}
  userPoolName: ${self:service}-user-pool-${sls:stage}${self:custom.timestamp}

provider:
  name: aws
  runtime: nodejs18.x
  region: us-east-1
  timeout: 29
  apiGateway:
    minimumCompressionSize: 1024
    shouldStartNameWithService: true
  environment:
    PRODUCTS_TABLE: ${self:service}-products-${sls:stage}
    USERS_TABLE: ${self:service}-users-${sls:stage}
    ORDERS_TABLE: ${self:service}-orders-${sls:stage}
    PRODUCT_BUCKET: ${self:service}-products-${sls:stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: 
        - !GetAtt ProductsTable.Arn
        - !GetAtt UsersTable.Arn
        - !GetAtt OrdersTable.Arn
    - Effect: Allow
      Action:
        - s3:PutObject
        - s3:GetObject
        - s3:DeleteObject
      Resource: !Join ['', [!GetAtt ProductBucket.Arn, '/*']]
    - Effect: Allow
      Action:
        - s3:ListBucket
      Resource: !GetAtt ProductBucket.Arn

functions:
  # Authentication functions
  postConfirmation:
    handler: src/auth/postConfirmation.handler
    environment:
      USERS_TABLE: ${self:provider.environment.USERS_TABLE}
    events:
      - cognitoUserPool:
          pool: ${self:custom.userPoolName}
          trigger: PostConfirmation
          existing: true
          
  fixUserTable:
    handler: src/users/fixUserTable.handler
    events:
      - http:
          path: /admin/fix-users
          method: post
          cors: true
          
  deleteAllData:
    handler: src/admin/deleteAllData.handler
    events:
      - http:
          path: /admin/delete-all-data
          method: post
          cors: true
          
  createUser:
    handler: src/auth/createUser.handler
    events:
      - http:
          path: /users
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            
  # User profile functions
  getUser:
    handler: src/users/getUserById.handler
    events:
      - http:
          path: /users/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            
  updateUser:
    handler: src/users/updateUserById.handler
    events:
      - http:
          path: /users/{id}
          method: put
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  
  # Product functions
  listProducts:
    handler: src/products/listProducts.handler
    events:
      - http:
          path: /products
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            
  getUploadUrl:
    handler: src/products/getUploadUrl.handler
    timeout: 29
    events:
      - http:
          path: /products/upload-url
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  
  getProduct:
    handler: src/products/getProduct.handler
    events:
      - http:
          path: /products/{id}
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            
  getDownloadUrl:
    handler: src/products/getDownloadUrl.handler
    events:
      - http:
          path: /products/{id}/download
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
            
  deleteProduct:
    handler: src/products/deleteProduct.handler
    events:
      - http:
          path: /products/{id}
          method: delete
          cors: true
            

  
  createProduct:
    handler: src/products/createProduct.handler
    timeout: 29
    events:
      - http:
          path: /products
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
  
  # Order functions
  createOrder:
    handler: src/orders/createOrder.handler
    events:
      - http:
          path: /orders
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: aws_iam
  
  getOrders:
    handler: src/orders/getOrders.handler
    events:
      - http:
          path: /orders
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
              - X-Amz-Date
              - Authorization
              - X-Api-Key
              - X-Amz-Security-Token
              - X-Amz-User-Agent
            allowCredentials: true
          authorizer: aws_iam

resources:
  - ${file(resources/cognito-identity-pool.yml)}
  
  - Resources:
      # DynamoDB Tables
      ProductsTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.PRODUCTS_TABLE}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
      
      UsersTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.USERS_TABLE}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
      
      OrdersTable:
        Type: AWS::DynamoDB::Table
        Properties:
          TableName: ${self:provider.environment.ORDERS_TABLE}
          BillingMode: PAY_PER_REQUEST
          AttributeDefinitions:
            - AttributeName: id
              AttributeType: S
            - AttributeName: userId
              AttributeType: S
          KeySchema:
            - AttributeName: id
              KeyType: HASH
          GlobalSecondaryIndexes:
            - IndexName: userIdIndex
              KeySchema:
                - AttributeName: userId
                  KeyType: HASH
              Projection:
                ProjectionType: ALL
      
      # S3 Bucket for product files
      ProductBucket:
        Type: AWS::S3::Bucket
        Properties:
          BucketName: ${self:provider.environment.PRODUCT_BUCKET}
          # AccessControl: PublicRead
          CorsConfiguration:
            CorsRules:
              - AllowedHeaders:
                  - '*'
                AllowedMethods:
                  - GET
                  - PUT
                  - POST
                  - DELETE
                AllowedOrigins:
                  - '*'
          PublicAccessBlockConfiguration:
            BlockPublicAcls: false
            BlockPublicPolicy: false
            IgnorePublicAcls: false
            RestrictPublicBuckets: false
            
      ProductBucketPolicy:
        Type: AWS::S3::BucketPolicy
        Properties:
          Bucket: !Ref ProductBucket
          PolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Sid: PublicReadGetObject
                Effect: Allow
                Principal: '*'
                Action: 's3:GetObject'
                Resource: !Join ['', [!GetAtt ProductBucket.Arn, '/*']]
      
      # Cognito User Pool
      UserPool:
        Type: AWS::Cognito::UserPool
        Properties:
          UserPoolName: ${self:custom.userPoolName}
          AutoVerifiedAttributes:
            - email
          UsernameAttributes:
            - email
      
      UserPoolClient:
        Type: AWS::Cognito::UserPoolClient
        Properties:
          ClientName: ${self:service}-user-pool-client-${sls:stage}${self:custom.timestamp}
          UserPoolId: !Ref UserPool
          ExplicitAuthFlows:
            - ALLOW_USER_SRP_AUTH
            - ALLOW_REFRESH_TOKEN_AUTH
          GenerateSecret: false

      # User Pool Groups for Buyers and Creators
      BuyersGroup:
        Type: AWS::Cognito::UserPoolGroup
        Properties:
          GroupName: buyers
          UserPoolId: !Ref UserPool
      
      CreatorsGroup:
        Type: AWS::Cognito::UserPoolGroup
        Properties:
          GroupName: creators
          UserPoolId: !Ref UserPool

    Outputs:
      ProductsTableName:
        Value: !Ref ProductsTable
      UsersTableName:
        Value: !Ref UsersTable
      OrdersTableName:
        Value: !Ref OrdersTable
      ProductBucketName:
        Value: !Ref ProductBucket
      UserPoolId:
        Value: !Ref UserPool
      UserPoolClientId:
        Value: !Ref UserPoolClient
      IdentityPoolId:
        Value: !Ref IdentityPool